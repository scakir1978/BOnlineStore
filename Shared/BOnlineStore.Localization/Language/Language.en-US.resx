<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblerNameMaxLength" xml:space="preserve">
    <value>The maximum length of assembler name can be 250</value>
    <comment>Montör adı 250 karakterden uzun olamaz.</comment>
  </data>
  <data name="AssemblerNameNotEmpty" xml:space="preserve">
    <value>Assembler name cannot be empty</value>
    <comment>Montör adı boş olamaz.</comment>
  </data>
  <data name="ColorCodeNotEmpty" xml:space="preserve">
    <value>Color code cannot be empty.</value>
    <comment>Renk kodu boş olamaz.</comment>
  </data>
  <data name="ColorGroupCodeNotEmpty" xml:space="preserve">
    <value>Color group code cannot be empty.</value>
    <comment>Renk grup kodu boş olamaz.</comment>
  </data>
  <data name="ColorGroupNameNotEmpty" xml:space="preserve">
    <value>Color group name cannot be empty.</value>
    <comment>Renk grup adı boş olamaz.</comment>
  </data>
  <data name="ColorGroupNotEmpty" xml:space="preserve">
    <value>Color group cannot be empty.</value>
    <comment>Renk grubu boş olamaz.</comment>
  </data>
  <data name="ColorNameNotEmpty" xml:space="preserve">
    <value>Color name cannot be empty.</value>
    <comment>Renk adı boş olamaz.</comment>
  </data>
  <data name="DefinitionServiceSwaggerTitle" xml:space="preserve">
    <value>BOnlineStore Definitions APIs</value>
    <comment>BOnlineStore Tanımlama API Listesi</comment>
  </data>
  <data name="FileNotFound" xml:space="preserve">
    <value>The {0} file could not be found.</value>
    <comment>İsimli dosya bulunamadı</comment>
  </data>
  <data name="FormulaTypeCodeNotEmpty" xml:space="preserve">
    <value>Formula type code cannot be empty.</value>
    <comment>Formül tip kodu boş olamaz.</comment>
  </data>
  <data name="FormulaTypeNameNotEmpty" xml:space="preserve">
    <value>Formula type name cannot be empty.</value>
    <comment>Formül tip adı boş olamaz.</comment>
  </data>
  <data name="HandledException" xml:space="preserve">
    <value>An error occurred during operation. See logs/log details for more information.</value>
    <comment>İşlem sırasında hata oluştu. Daha fazla bilgi için loglara/log detaylarına bakınız.</comment>
  </data>
  <data name="ModelCodeNotEmpty" xml:space="preserve">
    <value>Model code cannot be empty.</value>
    <comment>Model kodu boş olamaz.</comment>
  </data>
  <data name="ModelGroupCodeMustBeUnique" xml:space="preserve">
    <value>Model group code must be unique.</value>
    <comment>Model grup kodu daha önce girilmiş.</comment>
  </data>
  <data name="ModelGroupCodeNotEmpty" xml:space="preserve">
    <value>Model group code cannot be empty.</value>
    <comment>Model grup kodu boş olamaz.</comment>
  </data>
  <data name="ModelGroupNameNotEmpty" xml:space="preserve">
    <value>Model group name cannot be empty.</value>
    <comment>Model grup adı boş olamaz.</comment>
  </data>
  <data name="ModelGroupNotEmpty" xml:space="preserve">
    <value>Model group cannot be empty.</value>
    <comment>Model grubu boş olamaz.</comment>
  </data>
  <data name="ModelNameNotEmpty" xml:space="preserve">
    <value>Model name cannot be empty.</value>
    <comment>Model adı boş olamaz.</comment>
  </data>
  <data name="PriceListMasterNameNotEmpty" xml:space="preserve">
    <value>Price list name cannot be empty</value>
    <comment>Fiyat listesi açıklaması boş olamaz.</comment>
  </data>
  <data name="RecordNotFound" xml:space="preserve">
    <value>No record with id number {1} found in table {0}.</value>
    <comment>{0} tablosunda {1} id numaralı kayıt bulunamadı.</comment>
  </data>
  <data name="RecordNotFoundPredicate" xml:space="preserve">
    <value>In the {0} table, the record you are looking for could not be found.</value>
    <comment>{0} tablosunda aradığınız kayıt bulunamadı.</comment>
  </data>
  <data name="SwaggerSecurityDescription" xml:space="preserve">
    <value>Please enter a valid token.</value>
    <comment>Lütfen geçerli bir token girin.</comment>
  </data>
  <data name="UnhandledException" xml:space="preserve">
    <value>Unhandled exeption occurred.</value>
    <comment>İşlenmemiş bir hata oluştu.</comment>
  </data>
  <data name="ValidationErrors" xml:space="preserve">
    <value>Validation errors occurred.</value>
    <comment>Validasyon hataları oluştu.</comment>
  </data>
  <data name="AssemblerCodeMaxLength" xml:space="preserve">
    <value>The maximum length of assembler code can be 50</value>
  </data>
  <data name="AssemblerCodeMustBeUnique" xml:space="preserve">
    <value>Assembler code must be unique</value>
  </data>
  <data name="AssemblerCodeNotEmpty" xml:space="preserve">
    <value>Assembler code cannot be empty</value>
  </data>
  <data name="RegionCodeNotEmpty" xml:space="preserve">
    <value>Region code cannot be empty.</value>
  </data>
</root>